name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # Test on Ubuntu with Redis service
  test-ubuntu:
    name: Test on Ubuntu - Node ${{ matrix.node-version }} (with Redis)
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x, 22.x]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install build tools
        run: sudo apt-get update && sudo apt-get install -y build-essential python3 redis-tools

      - name: Install dependencies
        run: npm install

      - name: Build native addon
        run: npm run build

      - name: Copy native addon to src/build
        run: |
          mkdir -p src/build
          cp build/Release/dsp-ts-redis.node src/build/

      - name: Wait for Redis
        run: |
          timeout 30 bash -c 'until redis-cli ping; do sleep 1; done'
          echo "✅ Redis is ready"

      - name: Run all tests (with Redis integration tests)
        run: npm test
        env:
          REDIS_URL: redis://localhost:6379

      - name: Generate coverage report
        if: matrix.node-version == '20.x'
        run: npm run test:coverage || echo "⚠️ Coverage not configured"
        continue-on-error: true

      - name: Upload coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Test on Windows and macOS (Redis optional)
  test-other:
    name: Test on ${{ matrix.os }} - Node ${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        node-version: [18.x, 20.x, 22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Setup Redis (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install redis
          brew services start redis
          sleep 2
        continue-on-error: true

      - name: Install dependencies
        run: npm install

      - name: Build native addon
        run: npm run build

      - name: Copy native addon to src/build
        shell: bash
        run: |
          mkdir -p src/build
          cp build/Release/dsp-ts-redis.node src/build/

      - name: Run all tests (Redis tests will skip if unavailable)
        run: npm test
        env:
          REDIS_URL: redis://localhost:6379

  prebuild:
    name: Prebuild ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [test-ubuntu, test-other]

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "npm"

      - name: Install build tools (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt-get update && sudo apt-get install -y build-essential python3

      - name: Install dependencies
        run: npm install

      - name: Build prebuilds
        run: npm run prebuild

      - name: Upload prebuilds
        uses: actions/upload-artifact@v4
        with:
          name: prebuilds-${{ matrix.os }}
          path: prebuilds/
          retention-days: 90

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Run ESLint (if configured)
        run: npx eslint src --max-warnings=0 || echo "⚠️ ESLint not configured, skipping"
        continue-on-error: true

      - name: TypeScript type check
        run: npx tsx --noEmit || echo "⚠️ TypeScript check skipped"
        continue-on-error: true
