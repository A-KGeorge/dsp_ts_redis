name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [created]

jobs:
  build:
    name: Build on ${{ matrix.os }} (Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [22.x] # using your local Node version (v22.17.1)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install build tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y build-essential cmake python3

      - name: Install build tools (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install cmake

      - name: Install dependencies
        run: npm install

      - name: Build native addon
        run: npm run build

      - name: List build outputs (debug)
        run: |
          echo "Checking build/Release directory:"
          ls -la build/Release/ || echo "build/Release not found"
          echo "Checking src/build directory:"
          ls -la src/build/ || echo "src/build not found"
        shell: bash

      - name: Verify native module load
        run: node -e "try { require('./src/build/dsp_js_native.node'); console.log('✅ Native module loaded from src/build'); } catch(e) { require('./build/Release/dsp_js_native.node'); console.log('✅ Native module loaded from build/Release'); }"

      - name: TypeScript type check
        run: npx tsc --noEmit

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-node-${{ matrix.node-version }}-build
          path: |
            build/Release/*.node
            src/build/*.node
          retention-days: 7

  # Optional: Generate prebuilt binaries for npm distribution
  prebuild:
    name: Prebuild for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'release' || contains(github.event.head_commit.message, '[prebuild]')

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20, 22]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}.x
          cache: "npm"

      - name: Install build tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y build-essential cmake python3

      - name: Install build tools (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install cmake

      - name: Install dependencies
        run: npm install

      - name: Install prebuildify
        run: npm install --save-dev prebuildify

      - name: Build prebuilds
        run: npx prebuildify --napi --strip

      - name: Upload prebuilds
        uses: actions/upload-artifact@v4
        with:
          name: prebuilds-${{ matrix.os }}-node${{ matrix.node-version }}
          path: prebuilds/
          retention-days: 30

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Run ESLint (if configured)
        run: npx eslint src --max-warnings=0 || echo "⚠️ ESLint not configured, skipping"
        continue-on-error: true

      - name: TypeScript type check
        run: npx tsc --noEmit
